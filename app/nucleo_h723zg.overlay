/ {
	chosen {
		zephyr,code-partition = &slot0_partition;
		zephyr,boot-mode = &boot_mode0;
		zephyr,bootloader-info = &boot_info0;
		ioexp,uart = &uart9;
		ioexp,spi = &ioexp;
	};

	zephyr,user {
		io-channels = <&adc1 4>;
		io-channel-names = "audio_in";

		dmas = <&dmamux1 5 0 (STM32_DMA_MEMORY_TO_MEMORY | STM32_DMA_MEM_INC |
		       STM32_DMA_MEM_32BITS | STM32_DMA_PERIPH_32BITS)>,
		       <&dmamux1 6 0 (STM32_DMA_MEMORY_TO_MEMORY | STM32_DMA_MEM_INC |
		       STM32_DMA_MEM_32BITS | STM32_DMA_PERIPH_32BITS)>;
		dma-names = "audio_in_dma", "audio_out_dma";
	};

	psram: psram@90000000 {
		compatible = "zephyr,memory-region", "mmio-sram";
		device_type = "memory";
		reg = <0x90000000 DT_SIZE_M(8)>;
		zephyr,memory-region = "PSRAM";
		status = "okay";
	};
};


&backup_sram {
	retainedmem0: retainedmem {
		compatible = "zephyr,retained-ram";
		status = "okay";
		#address-cells = <1>;
		#size-cells = <1>;

		boot_info0: retention@0 {
			compatible = "zephyr,retention";
			status = "okay";
			reg = <0x00 0x100>;
		};
		boot_mode0: retention@100 {
			compatible = "zephyr,retention";
			status = "okay";
			reg = <0x100 0x1>;
		};
	};
};

&flash0 {
	partitions {
		compatible = "fixed-partitions";
		#address-cells = <1>;
		#size-cells = <1>;

		boot_partition: partition@0 {
			label = "mcuboot";
			reg = <0x00000000 0x20000>;
		};
		slot0_partition: partition@20000 {
			label = "image-0";
			reg = <0x00020000 0x60000>;
		};
		slot1_partition: partition@80000 {
			label = "image-1";
			reg = <0x00080000 0x60000>;
		};

		storage_partition: partition@e0000 {
			label = "storage";
			reg = <0x000e0000 0x00020000>;
		};
	};
};

&octospi1 {
	pinctrl-0 = <
		&octospim_p1_clk_pb2
		&octospim_p1_ncs_pg6
		&octospim_p1_io0_pd11
		&octospim_p1_io1_pd12
		&octospim_p1_io2_pe2
		&octospim_p1_io3_pd13>;
	pinctrl-names = "default";
	status = "okay";

	ospi_psram: ospi_psram@90000000 {
		/* The PSRAM functionally behaves like NOR flash, using the same commands. */
		compatible = "st,stm32-ospi-nor";
		reg = <0x90000000 DT_SIZE_M(8)>; /* 64 Mbits */
		/* The datasheet says 33 MHz is the max for a basic single-byte SPI read
		 * (cmd 'h03), 84 MHz for bursts crossing page boundaries, and 133 MHz
		 * otherwise. Start off at 33 MHz to get things working.
		 * Data sample training is required for speeds > 84 MHz.
		 */
		ospi-max-frequency = <DT_FREQ_M(33)>;
		spi-bus-width = <OSPI_QUAD_MODE>;
		data-rate = <OSPI_STR_TRANSFER>;
		status = "okay";

		/* The PSRAM doesn't appear to support SFDP so we need to specify those
		 * parameters here. 36 bytes LE.
		 */
		sfdp-bfp = [
			53 46 44 50  00 01 00 ff  00 00 01 0f  10 00 00 ff
			00 00 20 00  ff ff ff 03  06 eb 00 00  00 00 00 00
			10 00 00 00  00 00 00 00  00 00 06 eb  00 00 00 00
			00 00 00 00  00 00 00 00  a0 00 00 00  00 00 00 00
			00 00 00 00  00 00 00 00  00 00 00 00
		];
	};
};

&opamp1 {
	pinctrl-0 = <&analog_pb0>; /* vinp, vinn is connected internally */
	pinctrl-names = "default";
	status = "okay";

	pos-term = <0>; /* gpio */
	neg-term = <3>; /* vinm */
};

&opamp2 {
	pinctrl-0 = <&analog_pe7>;
	pinctrl-names = "default";
	status = "okay";

	pos-term = <1>; /* dac */
	neg-term = <3>; /* vinm */
};

&dfsdm1 {
	dmas = <&dmamux1 3 101 (STM32_DMA_PERIPH_TO_MEMORY | STM32_DMA_MEM_INC |
		STM32_DMA_MEM_16BITS | STM32_DMA_PERIPH_16BITS)>;
	dma-names = "rx";
	status = "okay";

	sinc_order = "sinc4";
	intg_oversample = <1>;
	sinc_oversample = <16>;
	rshift = <8>;
};

&fmac {
	dmas = <&dmamux1 2 121 (STM32_DMA_MEMORY_TO_PERIPH | STM32_DMA_MEM_INC |
		STM32_DMA_MEM_16BITS | STM32_DMA_PERIPH_16BITS)>;
	dma-names = "tx";
	status = "okay";

	/* The below need to match the oversampling ratio in audio.h! */
	x1_wm = <1>;
	x1_size = <128>;
	y_wm = <1>;
	y_size = <4>;
	x2_size = <124>;

	operation = "convolution";
	lshift = <0>;
	clip;
};

&adc1 {
	#address-cells = <1>;
	#size-cells = <0>;

	pinctrl-0 = <&adc1_inp4_pc4>; /* opamp1 output */
	pinctrl-names = "default";

	st,adc-clock-source = <SYNC>;
	/* 34375 kHz or 550 MHz/16 */
	st,adc-prescaler = <4>;
	/* The ADC full range is in fact 3.3V, but the opamp doesn't appear to
	 * want to drive beyond 2.5V. TODO: investigate */
	vref-mv = <3300>;
	status = "okay";

	channel@4 {
		reg = <4>;
		zephyr,gain = "ADC_GAIN_1";
		/* This is the offset for 1.25 V */
		zephyr,offset = <0x60F8>;
		zephyr,reference = "ADC_REF_INTERNAL";
		zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 17)>;
		zephyr,resolution = <16>;
		zephyr,trig-src = <13>;
	};
};

&adc2 {
	st,adc-clock-source = <1>;
	st,adc-prescaler = <4>;
	vref-mv = <3300>;
	status = "disabled";
};

&dac1 {
	pinctrl-0 = <&dac1_out2_pa5>;
	pinctrl-names = "default";
	status = "okay";

	/* DMA to DAC consumes from FMAC output register.
	 * 67 = dac1ch1, 68 = dac1ch2
	 */
	dmas = <&dmamux1 4 68 (STM32_DMA_MEMORY_TO_PERIPH |
		       STM32_DMA_MEM_16BITS | STM32_DMA_PERIPH_16BITS)>;
	dma-names = "tx";
};

&dma1 {
	status = "okay";
};

&dma2 {
	status = "okay";
};

&bdma1 {
	status = "okay";
};

&dmamux1 {
	status = "okay";
};

&dmamux2 {
	status = "okay";
};

&sram4 {
	zephyr,memory-attr = <DT_MEM_ARM_MPU_RAM_NOCACHE>;
	status = "okay";
};

&mac {
	status = "okay";
};

&spi2 {
	fifo-enable;
	pinctrl-0 = <&spi2_nss_pb4 &spi2_sck_pb10 &spi2_miso_pb14 &spi2_mosi_pb15>;
	pinctrl-names = "default";
	status = "okay";

	/* This ensures we use hardware /CS control */
	/delete-property/ cs-gpios;

	auxdisplay_0: display@0 {
		compatible = "solomon,ssd1803a";
		spi-max-frequency = <1000000>;
		reg = <0>;
		status = "okay";

		reset-gpios = <&gpiob 1 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
		mode-gpios = <&gpioa 8 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;

		columns = <20>;
		rows = <4>;
		cgrom-size = <240>;
	};
};

&spi3 {
	fifo-enable;
	pinctrl-0 = <&spi3_nss_pa4 &spi3_sck_pb3 &spi3_miso_pb4 &spi3_mosi_pb5>;
	pinctrl-names = "default";
	status = "okay";

	/* This ensures we use hardware /CS control */
	/delete-property/ cs-gpios;

	ioexp: ioexp@0 {
		compatible = "vnd,io-expander";
		spi-max-frequency = <DT_FREQ_M(10)>;
		reg = <0>;
		status = "okay";
	};
};

&uart9 {
	pinctrl-0 = <&uart9_tx_pd15 &uart9_rx_pd14>;
	pinctrl-names = "default";
	status = "okay";
};

&timers6 {
	st,prescaler = <0>;
	status = "okay";

	counter {
		status = "okay";
	};
};

/* Unused hardware */
&fdcan1 {
	status = "disabled";
};

&ext_memory {
	status = "disabled";
};

&i2c1 {
	status = "disabled";
};

&spi1 {
	status = "disabled";
};

&usart2 {
	status = "disabled";
};

/* Disable MAC and MDIO for now to free up PC4. Still need to remove
 * SB36 to avoid driving RMII_RXD0 mid-threshold.
 */
&mac {
	status = "disabled";
};

&mdio {
	status = "disabled";
};

&green_led {
	status = "disabled";
};
