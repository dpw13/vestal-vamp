vin = vcc*(Rpot/(Rb + Rpot))

frontend:
- capacitive coupling + biasing
- opamp + 2nd order LPF

frontend -> ADC
ADC -> sigma-delta sinc/decimation filter -DMA-> circ buffer A
circ buffer A -> Windowing -> CMSIS FFT -> flatness normalization -DMA-> main audio buffer

main audio buffer -> phase & frequency interpolation -> IFFT -> add overlap -DMA-> DAC -> frontend
granulation controller -/

Buffers:
hw FIFOs: ADC, sigma-delta decimation filter
time-domain circular input buffer
input FFT buffer: windowing, CMSIS FFT, normalization
frequency-domain audio buffer
output FFT buffer: freq interpolation, CMSIS IFFT
time-domain circular output buffer
hw FIFOs: DAC

some data may be copied into local fast SRAM for computation (FFT buffers) and out into PSRAM
for storage (main buffer)

1) ADC -DMA-> buffer -DMA-> DAC
2) ADC -DMA-> buffer -> FFT -DMA-> buffer -DMA-> IFFT -> DAC

FFTs need to overlap and the algorithm modifies the source buffer, so we need to duplicate the
input stream for each FFT.
-> Can we DMA straight from the ADC buffer into blobs for FFT generation? We need to do two FFTs
per buffer (given 50% overlap). Can we even detect an overflow?

# Building

$ ./venv/bin/activate
$ west build -b nucleo_h723zg app
$ west flash
$ microcom -p /dev/ttyACM0 -s 115200

> usbipd bind -i 0483:374e
> usbipd attach -a -w -i 0483:374e

We eventually may want to restructure the repo to make the top-level a zephyr workspace
and just the application the vv repo.

# cd app && openocd
# ~/zephyr-sdk-0.17.0/arm-zephyr-eabi/bin/arm-zephyr-eabi-gdb build/app/zephyr/vv.elf
(gdb) target extended-remote localhost:3333
(gdb) monitor reset halt
(gdb) load
(gdb) continue

# TODO Remaining
- DFSDM (input filtering)
        - monitor extremes
x DAC offset correction

- optimization: CORDIC DMA for rect to polar in fft_dma and polar to rect in ifft_dma
        - possibly vectorize some of the computation in ifft_dma (phase subtraction, scaling, interpolation)

DMA allocation:
        dma1.2: memory to FMAC
        dma1.3: DFSDM to memory (fft_dma)
        dma1.4: FMAC to DAC
        dma1.5: audio_in_dma (fft_dma)

dma1.4 count (DAC DMA):
        devmem 40020074
dma1.2 count (FMAC DMA)
        devmem 40020044
dac1.2 status:
        devmem 40007434
dac1.2 value:
        devmem 40007430
dac1.2 nx value:
        devmem 40007418
fmac status:
        devmem 48024014
fmac wdata:
        devmem 48024018
timer6 trig:
        devmem 40001014 32 1

adc out:
        devmem 40022040
dfsdm in:
        devmem 40017810

With a dac_buffer value of 0x0010 and FMAC left shift of 6, we see (what appears to be) the minimum LSB of the DAC. This
may be affected by being so near the negative rail. This is all with 16x oversampling with a single FMAC coeff of 0x7FFF.
With lshift = 2, 0x4000 in the DAC buffer gives full-scale, which makes sense and should produce a single LSB of
saturation in the FMAC, though we see no saturation bit set. The saturation bit appears to only set during accumulation
and not when converting to s16 in the output stage (and/or does not include the left-shift). lshift of 10 does not set
the saturation bit.

lshift of 0, a single coeff of 0x7FFF, and an FMAC input sample of 0x7F00 produces a half-scale DAC sample. This seems
like what we want, barring scaling due to the window function.

# Routing TODO:
attiny816 pin 7 to PD14 (serial from io exp)
        pin 6 to PD15 (serial stm32 -> ioexp)

attiny  stm32   func
7       PD14    serial ioexp->stm32
6       PD15    serial stm32->ioexp
14      PB5     mosi
15      PB4     miso
16      PB3     sck
0       PA4     ~ss

Need to order:
24x 3 pin 0.1 in dupont female
- matching female pins