vin = vcc*(Rpot/(Rb + Rpot))

frontend:
- capacitive coupling + biasing
- opamp + 2nd order LPF

frontend -> ADC
ADC -> sigma-delta sinc/decimation filter -DMA-> circ buffer A
circ buffer A -> Windowing -> CMSIS FFT -> flatness normalization -DMA-> main audio buffer

main audio buffer -> phase & frequency interpolation -> IFFT -> add overlap -DMA-> DAC -> frontend
granulation controller -/

Buffers:
hw FIFOs: ADC, sigma-delta decimation filter
time-domain circular input buffer
input FFT buffer: windowing, CMSIS FFT, normalization
frequency-domain audio buffer
output FFT buffer: freq interpolation, CMSIS IFFT
time-domain circular output buffer
hw FIFOs: DAC

some data may be copied into local fast SRAM for computation (FFT buffers) and out into PSRAM
for storage (main buffer)

1) ADC -DMA-> buffer -DMA-> DAC
2) ADC -DMA-> buffer -> FFT -DMA-> buffer -DMA-> IFFT -> DAC

FFTs need to overlap and the algorithm modifies the source buffer, so we need to duplicate the
input stream for each FFT.
-> Can we DMA straight from the ADC buffer into blobs for FFT generation? We need to do two FFTs
per buffer (given 50% overlap). Can we even detect an overflow?

# Building

$ ./venv/bin/activate
$ west build -b nucleo_h723zg app

> usbipd bind -i 0483:374e
> usbipd attach -a -w -i 0483:374e

We eventually may want to restructure the repo to make the top-level a zephyr workspace
and just the application the vv repo.

#  ~/zephyr-sdk-0.17.0/arm-zephyr-eabi/bin/arm-zephyr-eabi-gdb build/app/zephyr/zephyr.elf